def floyd_warshall_algo(graph):
    n = len(graph)  
    dist = [[float('inf')] * n for _ in range(n)]

    
    for u in range(n):
        dist[u][u] = 0  

    for u in range(n):
        for v, weight in graph[u]:  
            dist[u][v] = weight  

    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])

    find_diameter = 0
    for i in range(n):
        for j in range(n):
            if dist[i][j] < float('inf'):
                find_diameter = max(find_diameter, dist[i][j])

    return find_diameter

graph = [
    [(1, 1), (2, 4)],  
    [(2, 2), (3, 5)],  
    [(3, 1)],         
    []                 
]


diameter = floyd_warshall_algo(graph)

print(f"Diameter of the graph: {find_diameter}")
